expression 'Survey name cleanup' =
		let
		    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("pZZbc6IwFMe/SoZnOwvRqjwiSKfT6zbuTm2nD1nNVloMbIB29dNvQhSRHG9bn9Qk5/fPueb52bKvMufSLj+dwP9DvBurZflJHLNXhrw0jaMJzaOEo5DGMcK248r1CxI6LjpD0D7C5hGnQu6yr6Yb094F8bD10moQ7Q7xhsoiTdVJluVMaNSwEEnKKEeX8zkTmTI9SgqBHMklVNAZGjDOWZ4nNUHAoTN0L5Ipws652+01VPlLR+FNVe6pqrBS9ZYU72/sSDndNu4YcrqgHO9dhyWUjo0RKcQHW4Dx0BuGHzQuymA0g9BfgPbdub7uJZf35NksSkHrm2XD7hXxfgBuvFN/t6xryl8LKvOksiqt3STTImbIqQGqfSQvpovtPdt+ugZ57qe+R8MOQMVHULFxyyeQ6lEdnWtGpzLIynveRH6dr8hVAjXcae43gDkULn/5G8jOOxExnq9KsMyQGqq22HTlYgZXwFiHjjDxEU3gyMmvoxmNYsqnNdb6RMSr1X2R/A5HcqavuAeP/wNvhvQexA8D1awaHq4Xc7aqZpKKiL9KZdguNRBsg2Xf5A5GYDcMHaDQYcahUvd7ypRBCN40oWZ0V+pozu7UCQYdEDGcrRCrSNRRu5NH04DoGdS/MPVRh8wrslzQOKJIRf6WfaInRsss2PTglZSy9Ywd96z8dczBqnm7/baRSwMOC5tod5wgDH9JWNsQloHCvFQLU0k+ZlTsmbjhWOdepelghvsLAfeu5aZ37YXiA7ytQdo36J9gVwu7QH2VMkrQFvJggflgCTs9cAaVENXAvjUw2/uM9ljAXvypu/MwRJUj4SquOPtGwAR0lu4g6jGY5RQ9yPedBq1rdN2QKkSteDdnmm7Tbw0DpounZQWJfD3KYxw9sLT4JV+Vx0PNswYcHna6G7eseyaK43FqtwHY4UpfA0aULymPTnDk+oQBugUHl26OErQefc4JqM241JWFnX6vWVmBS0Cwjxtg/BXweRs3XwqB+1iCX/4B", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Id = _t, #"Old Survey Name" = _t, #"New Name" = _t, SurveyId = _t]),
		    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Id", type text}, {"Old Survey Name", type text}, {"New Name", type text}, {"SurveyId", type text}})
		in
		    #"Changed Type"
	lineageTag: ea9e7aed-2b15-42a6-b1f6-478bb622c4b3

	annotation PBI_NavigationStepName = Navigation

expression 'Survey question cleanup' =
		let
		    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Old = _t, New = _t]),
		    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Old", type text}, {"New", type text}})
		in
		    #"Changed Type"
	lineageTag: cf46abff-b570-40d6-bba7-61b148941bad

	annotation PBI_NavigationStepName = Navigation

expression 'Survey & Program' =
		let
		    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("vZrZcps6GIBfRZPreg4maZbe4S0n06R2I+wk7XQ6qq3aJGwV4DR++iMhYwRGGEfi9KKDWfT9u35J+f79xPgcdW+M9N/ZYPgILfPkw4mVRDFBroMA8hfgC34F3zBy2fWN52ESOYEPTMM0QAd06evXKARPGBH60zS6Vx32iN/+yW7TS/F2euvHhzJ6Dq2749CmJnT/D0f3A9fFSwysMHSdOYoZaoRcNx15y4LYw1GMGa/06Gf2qMRkr2XMywfOtMeP1NJnKdMLURSBHiJz7AY+ogNbIXHYyKZJfwwTEoQY+cAOEkadkGABzMtz4+Ol8Dm9uyTI+yQZh74JVwGJOzYmXiqfaTD5mPMgfctfVkhIoDVuIuHI8ZELhmv6nz7xup3sgUQ8O5SLt/VMql6tCOKLUgOJDsyCxh7fjzIHRjEC9zReigHapcOPiYP9OA0kyZvNHSOE60UWrrvx0gyAmKydOQZ5CihnRs/nqEHgOT4F+eAeh8kvmh1tIfubGbSm9OlwBHbDCXYEMCFr/KZJP+uF68dDmA+tOeVz2KhbAeNOFg0o4PYeyoCyUBmdVyBTo6Xf6irdAz5rFKTf1S0a69E2LdpV1jiD1rA8buoxUZatKGk1ZTkKEUEr0MO+j+M40Oxy4+pYkVhBhc9B8vKM9crS3/yukEWaWdqoSU5N40zui9GTviKyaUhVayHy2Qiu+Gx0DUdp5a/gbefGrtTAZrfKwNXzkED2mpL3UlSRbKMiOe8DkmzK04qb8Qk3w9349Es/WjkhcHwwYLOSduTXOiTEa4c2jFqYeV8BYZFZ7CG0ande9N+EYPBlAv8n0/aKasrgOo0sJA0pqp71MRSYd1WamdMoY8JiY9+kROSTo1nJPtguT/82pVeUCWX6wyjz9iH6aRv0t6LuhwuVOhIXkc0ySh0b1GHv6Dp6WRHW6tjnOqw0hdWD2i6GVW2tVKbN/i3SKotGmzk8uztCgDbS+PG06GdBgAkmiTaisMr+vFX5Ka3TlYvtDrjFaEF/sHhjG0XiaudE17qbyvJxq32tLJlNqEzEZ+NoFGAiMwZM6CXV+peLwQCvsRuEHs2EXa3b2UL2YjmEDu2JSEP0IrdRh5f6eYIWAUkdE68wXdS7KETLICpnyq4Fz6Oi0ILnt6tb8Fk/t05D9F73/1704Gj0qSY0fNxDH+wrlJnzPScf7CaUmYvmTF22fYjLTEnnoAyalp1YnEF7mOT9gjJsUg8rNCfKsNt6WLE3UKZ9O0CLg/nLKnA9JZ6wVtvL+/0ORLm2uOUglC2VtEbJ7E9TrNZ4mZGmWL2RM1s35mqJIWEhfF2OoZxctyxV5u5lZiV3f+dfF/932eKN+mllbHIUVtf0ZW+OwuqaweyXGmzFoY5mY0/P3oVXM3q++37l8V1gIYHbOtsxxvzU6hb5ywQtcT4aHfkuWCS035bv/L6PefXK1dsxYZws3qrI8p3f95G7F5Xk1F/s63+0HS1ZiB9gCSs8a04vva2eO41a8GnP5sdabGnb2gmr8cQDJxu6Km7opb1CDvsjCN0htOKOrKGb7dGHK+7cjC6cADbVXvnQcPC8lUFgNzkUUwb3+zy6bORvkO+0eIb/l2uYGZFatC1U3yyhTG2oH/8B", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [SurveyVersionId = _t, #"Survey Name" = _t, #"Program Name" = _t, #"Program Family" = _t, #"Program Year" = _t, Semester = _t]),
		    #"Changed Type" = Table.TransformColumnTypes(Source,{{"SurveyVersionId", type text}, {"Survey Name", type text}, {"Program Name", type text}, {"Program Family", type text}})
		in
		    #"Changed Type"
	lineageTag: 3e92ceee-3844-435f-930b-75e0b364171f

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Score sentiment' = AIFunctions.Contents(){[Key = "CognitiveServices.ScoreSentimenttexttext"]}[Data]
	lineageTag: 402d87f1-e5b1-4ac8-bdd5-ecbc1a0f9c14

expression 'Sample File' =
		let
		    Source = SharePoint.Files("https://efcom.sharepoint.com/sites/EFGapYear990", [ApiVersion = 15]),
		    #"Filtered Rows" = Table.SelectRows(Source, each ([Folder Path] = "https://efcom.sharepoint.com/sites/EFGapYear990/Shared Documents/Reports/Evals/ILC/Scheduled reports/")),
		    Navigation1 = #"Filtered Rows"{0}[Content]
		in
		    Navigation1
	lineageTag: f38a81dc-e594-4d69-b9c1-cb51104f46ec
	queryGroup: 'Transform File from Query1\Helper Queries'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Binary

expression Parameter1 = #"Sample File" meta [IsParameterQuery=true, BinaryIdentifier=#"Sample File", Type="Binary", IsParameterQueryRequired=true]
	lineageTag: 3f836c52-4002-4518-abb8-ce9818fff63c
	queryGroup: 'Transform File from Query1\Helper Queries'

	annotation PBI_ResultType = Binary

expression 'Transform Sample File' =
		let
		    Source = Csv.Document(Parameter1,[Delimiter=",", Columns=58, Encoding=65001, QuoteStyle=QuoteStyle.Csv]),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
	lineageTag: 16d87aa4-1961-468b-8109-978d4f60cba7
	queryGroup: 'Transform File from Query1'

	annotation PBI_ResultType = Table

expression 'Transform File' =
		let
		    Source = (Parameter1 as binary) => let
		    Source = Csv.Document(Parameter1,[Delimiter=",", Columns=58, Encoding=65001, QuoteStyle=QuoteStyle.Csv]),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
		in
		    Source
	mAttributes: [ FunctionQueryBinding = "{""exemplarFormulaName"":""Transform Sample File""}" ]
	lineageTag: 722c1c06-9f9b-4a9d-9bee-09f708f0831c
	queryGroup: 'Transform File from Query1\Helper Queries'

	annotation PBI_ResultType = Function

	annotation PBI_NavigationStepName = Navigation

